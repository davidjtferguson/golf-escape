pico-8 cartridge // http://www.pico-8.com
version 29
__lua__


function _init()
 --constants
 pixel=0.125
 
 --collision offset
 coloffset=0.001
 
 av={
  x=4,
  y=4,
  
  xvel=0,
  yvel=0,
  
  w=pixel*8,
  h=pixel*8
 }
 
 updatehitboxes()
 
 bg=3
 
 currentupdate=updateplaying
 
end


function _update60()
 currentupdate()
end

function updateplaying()

 updatehitboxes()
 
 if mapcol(av.bottom,0,av.yvel,0) then
  moveavtoground()
  av.xvel=0
  av.yvel=0
 else
  av.yvel+=0.01
 end
 
 av.y=av.y+av.yvel

end
-->8
--collision

function updatehitboxes()
 --smaller than av
 av.hurtbox=makebox(1,2,5,3)
 
 local off=coloffset*9
 
 --cover top and bottom
 av.bottom=makebox(
  1,7,
  6,1,
  0,coloffset)
 
 av.top=makebox(
  1,1,
  6,1,
  0,coloffset)
 
 --space between top and bottom
 av.left=makebox(
  1,2,
  1,5,
  coloffset)
 
 av.right=makebox(6,2,1,5)
end

function makebox(x,y,w,h,xo,wo)
 return {
 	x=av.x+av.w*pixel*x-(xo or 0),
 	y=av.y+av.h*pixel*y,
 	w=av.w*pixel*w-(wo or 0),
 	h=av.h*pixel*h
 }
end


function moveavtoground()
 av.y+=av.yvel
 av.y-=av.y%pixel
 updatehitboxes()
 av.y+=distanceinwall(av.bottom,0,1,-1)+pixel
 updatehitboxes()
end

function moveavtoroof()
 av.y+=distancetowall(av.top,0,1,-1)
 av.y+=pixel-av.y%pixel
end

function moveavtoleft()
 --unsure why offset needed :(
 av.left.x+=coloffset 
 av.x+=distancetowall(av.left,1,0,-1)
 av.left.x-=coloffset
 av.x+=pixel-av.x%pixel
end

function moveavtoright()
 av.x+=distancetowall(av.right,1,0,1)
 av.x-=av.x%pixel
end

function distancetowall(box,checkx,checky,direction)
 local distancetowall=0

 while not mapcol(box,distancetowall*checkx,distancetowall*checky,0) do
  distancetowall+=(pixel*direction)
 end

 return distancetowall
end

function distanceinwall(box,checkx,checky,direction)
 local distanceinwall=0

 while mapcol
 (box,distanceinwall*checkx,
      distanceinwall*checky,0) do
  distanceinwall+=(pixel*direction)
 end

 return distanceinwall
end

--all sides collision(flag)
function allboxcol(f)
 if mapcol(av.top,0,0,f) and
    mapcol(av.bottom,0,0,f) and
    mapcol(av.left,0,0,f) and
    mapcol(av.right,0,0,f) then
  return true
 end
 return false
end

function anyboxcol(xvel,yvel,flag)
 if mapcol(av.top,xvel,yvel,flag) or
    mapcol(av.bottom,xvel,yvel,flag) or
    mapcol(av.left,xvel,yvel,flag) or
    mapcol(av.right,xvel,yvel,flag) then
  return true
 end
 return false
end


--mapcollision
function mapcol(box,xvel,yvel,flag)
 return checkflagarea(box.x+xvel,box.y+yvel,box.w,box.h,flag)
end

function checkflagarea(x,y,w,h,flag)
 return
  checkflag(x,y,flag) or
  checkflag(x+w,y,flag) or
  checkflag(x,y+h,flag) or
  checkflag(x+w,y+h,flag)
end

function checkflag(x,y,flag)
 local s=mget(x,y)
 return fget(s,flag)
end

-->8

function _draw()
 cls(bg)
 
 --todo: make map move
 xmap=0
 ymap=0
 
 map(xmap*16,ymap*16,xmap*128,ymap*128,16,16)
 
 spr(2,av.x*8,av.y*8)
end
__gfx__
00000000888888880000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000008bbbbbb80055550000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
007007008bbbbbb80555655000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000770008bbbbbb80555565000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000770008bbbbbb80555555000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
007007008bbbbbb80565555000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000008bbbbbb80556555000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000888888880055550000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__gff__
0001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__map__
0101010101010101010101010101010100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0100000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0100000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0100000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0100000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0100000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0100000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0100000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0100000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0100000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0100000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0100000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0100000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0100000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0100000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0101010101010101010101010101010100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
